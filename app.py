from media_getter import get_active_audio_sessions, get_media_info, control_media
from blya import fix_keyboard_layout
import asyncio
from threading import Thread, Lock
from flask import Flask, request, redirect, url_for, session, render_template, jsonify
from datetime import timedelta
import os
import time
import pandas as pd
import datetime
# imports for show_notification
import time
import random
import tkinter as tk
from PIL import Image, ImageTk
# imports for track_active_window
from win32gui import GetWindowText, GetForegroundWindow
import re

app = Flask(__name__)
app.secret_key = os.urandom(24)  # –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —â–æ—Å—å –≤–∏–ø–∞–¥–∫–æ–≤–µ
app.permanent_session_lifetime = timedelta(minutes=30)

# üîê –ø–∞—Ä–æ–ª—å, —è–∫–∏–π —Ç—Ä–µ–±–∞ –≤–≤–µ—Å—Ç–∏
PASSWORD = '****'

timer_data = {
    "remaining": 60,
    "running": False,
    "mode": "sleep"  # –∞–±–æ "shutdown"
}


def show_notification(
        title="",
        text="",
        duration=5,
        image_path=None,  # –®–ª—è—Ö –¥–æ PNG –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        max_image_size=(64, 64)):
    """
    –ü–æ–∫–∞–∑—É—î –∫–∞—Å—Ç–æ–º–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –∫—É—Ç–∫—É –µ–∫—Ä–∞–Ω–∞ –Ω–∞ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥.
    :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.
    :param text: –¢–µ–∫—Å—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.
    :param duration: –ß–∞—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö, –ø—Ä–æ—Ç—è–≥–æ–º —è–∫–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥–µ –≤–∏–¥–Ω–æ.
    :param image_path: –®–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (PNG).
    :param max_image_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—à–∏—Ä–∏–Ω–∞, –≤–∏—Å–æ—Ç–∞).
    """

    def create_window(custom_title, custom_text):
        # –≤–∞—Ä—ñ–∞—Ü—ñ—ó –∫–æ–ª—å–æ—Ä—ñ–≤ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        colors = [
            "#FF5733", "#33FF57", "#3357FF", "#FF33A1", "#33FFF5", "#A133FF", "#FF5733", "#F5A623", "#F82323",
            "#00C896", "#FFC300", "#3CFF33", "#3C33FF", "#FF333C", "#33F5FF", "#A1FF33", "#FFD433", "#FF6633",
            "#33DFFF", "#23A6F5", "#3CA6F5", "#5DFFAA", "#FF8833", "#33FF4D", "#44AAFF", "#FFCC33", "#33E8FF",
            "#FF33D4", "#A633FF", "#FF3366", "#33FF88", "#333AFF", "#FF8F33", "#3CA2FF", "#FF8D33", "#FF77AA",
            "#E8FF33", "#FFC233", "#FF5544", "#3399FF", "#FF3355", "#33DFFF", "#55FF33", "#FFAA88", "#77FF33",
            "#33A6FF", "#FF33AA", "#AAFF33", "#33AAFF", "#FF3399", "#FF88FF", "#AA33FF", "#FF3388", "#88FF33",
            "#55AAFF", "#AA3388", "#FF6655", "#33CCFF", "#CC33FF", "#55FF77", "#FFAA55", "#FF5566", "#99FF33",
            "#FF3388", "#66FF33", "#44FFAA", "#FFAA77", "#33FF66", "#AA55FF", "#FF5544", "#99FFAA", "#FFAA33",
            "#55FF99", "#33FF55", "#77AAFF", "#44CCFF", "#CCFF33", "#FF66AA", "#CC33AA", "#FF99FF", ]
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–∫–Ω–æ
        root = tk.Tk()
        root.title(title)
        root.attributes("-topmost", True)  # –ü–æ–≤–µ—Ä—Ö —ñ–Ω—à–∏—Ö –≤—ñ–∫–æ–Ω
        root.overrideredirect(True)  # –í–∏–º–∏–∫–∞—î–º–æ —Ä–∞–º–∫—É –≤—ñ–∫–Ω–∞
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ —Ç–∞ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        window_width = 310
        window_height = 110
        x = screen_width - window_width - 20  # –í—ñ–¥—Å—Ç—É–ø –≤—ñ–¥ –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—é
        y = screen_height - window_height - 60  # –í—ñ–¥—Å—Ç—É–ø –≤—ñ–¥ –Ω–∏–∂–Ω—å–æ–≥–æ –∫—Ä–∞—é
        root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ñ–æ–Ω —ñ –æ–±–≤–æ–¥–∫—É
        random.seed(time.time_ns())
        random.shuffle(colors)
        outer_frame = tk.Frame(root, bg=random.choice(
            colors), bd=3)  # –∫–æ–ª—ñ—Ä –æ–±–≤–æ–¥–∫–∏ –≤ bg
        outer_frame.pack(fill="both", expand=True)
        inner_frame = tk.Frame(outer_frame, bg="black")
        inner_frame.pack(fill="both", expand=True, padx=2, pady=2)
        # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–∞–ø–∏—Å—É —ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        image_with_caption_frame = tk.Frame(inner_frame, bg="black")
        image_with_caption_frame.pack(side="right", padx=5, pady=5)
        # –ß–∞—Å
        time_label = tk.Label(
            image_with_caption_frame,
            text=str(datetime.datetime.now().time().strftime('%H:%M')),
            bg="black",
            fg="white",
            justify="right",
            font=("Bahnschrift SemiLight Condensed", 12, "bold"))
        time_label.pack(side="top", anchor="ne")
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—è–∫—â–æ –∑–∞–¥–∞–Ω–æ)
        if image_path:
            try:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                img = Image.open(image_path)
                max_width, max_height = max_image_size
                img = img.resize((max_width, max_height))
                img = ImageTk.PhotoImage(img)
                # –ú–∞—Å—à—Ç–∞–±—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                width, height = img.width(), img.height()
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
                scale = max(width / max_width, height / max_height)
                if scale > 1:  # –ó–º–µ–Ω—à—É—î–º–æ –ª–∏—à–µ, —è–∫—â–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –∑–∞ –ª—ñ–º—ñ—Ç
                    img = img.subsample(int(scale), int(scale))
                # –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ –∫–æ—Ä–æ–±–∫–∏
                img_label = tk.Label(
                    image_with_caption_frame, image=img, bg="black")
                img_label.image = img  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —â–æ–± –Ω–µ –±—É–ª–æ GC
                img_label.pack(side="bottom", padx=5, pady=5)
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            inner_frame,
            text=custom_title,
            bg="black",
            fg=random.choice(colors),
            font=("Bahnschrift SemiLight Condensed", 16, "bold"))
        title_label.pack(pady=(5, 0))
        # –†–æ–∑–¥—ñ–ª—é–≤–∞–ª—å–Ω–∞ —Ä–∏—Å–∫–∞ –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º –∫–æ–ª—å–æ—Ä–æ–º
        canvas = tk.Canvas(inner_frame, height=2,
                           bg="black", highlightthickness=0)
        canvas.pack(fill="x", padx=10)  # –†–æ–∑—Ç—è–≥—É—î–º–æ –ø–æ —à–∏—Ä–∏–Ω—ñ –≤—ñ–∫–Ω–∞
        canvas.create_line(0, 1, 500, 1, fill="#2C2E2D",
                           width=2)  # –î–æ–¥–∞—î–º–æ –ª—ñ–Ω—ñ—é
        # –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message_label = tk.Label(
            inner_frame,
            text=custom_text,
            bg="black",
            fg=random.choice(colors),
            font=("Bahnschrift SemiLight Condensed", 14))
        message_label.pack(pady=(5, 0))
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ —á–µ—Ä–µ–∑ "duration" —Å–µ–∫—É–Ω–¥
        root.after(duration * 1000, root.destroy)
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–∫–Ω–æ
        root.mainloop()
    # –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    titles = [
        "–ü–∞—É–∑–∞ –¥–ª—è —Ä–æ–∑—É–º—É",
        "–ß–∞—Å –≤–∏–ø–∏—Ç–∏ –≤–æ–¥–∏",
        "–ö–æ—Ä–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ä–≤–∞",
        "–ï–π, –≤—ñ–¥–ø–æ—á–∏–Ω—å!",
        "–ü–µ—Ä–µ–∫—É—Ä –¥–ª—è –º–æ–∑–∫—É",
        "–•–æ—á–µ—à –∫–∞–≤–∏?",
        "–ó—É–ø–∏–Ω–∏—Å—å –Ω–∞ —Ö–≤–∏–ª—å–∫—É",
        "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –ø–∞—É–∑–∞",
        "–î–∞–π –º–æ–∑–∫—É –ø–µ—Ä–µ—Ä–≤—É",
        "–ó–≥–∞–¥–∞–π –ø—Ä–æ —Å–µ–±–µ",
        "–ü–æ—Ä–∞ —Ä–æ–∑—ñ–º'—è—Ç–∏—Å—å",
        "–í—ñ–¥–ø—É—Å—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É",
        "–ö–∞–≤–∞ –≤–∂–µ —Å—Ç—É–∫–∞—î",
        "–©–µ –ø—Ä–∞—Ü—é—î—à? –°–ø—Ä–∞–≤–¥—ñ?",
        "–ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–¥–∏—Ö–Ω–∏",
        "–†–µ–ª–∞–∫—Å-–∑–æ–Ω–∞ —á–µ–∫–∞—î",
        "–¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–∑–µ–Ω",
        "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –º–æ–∑–∫—É",
        "–û–Ω–æ–≤–∏ —Å–≤—ñ–π –ø—Ä–æ—Ü–µ—Å–æ—Ä",
        "–í—ñ–¥–ø–æ—á–∏–Ω—å, –¥—Ä—É–∂–µ",
        "–ú–∏—Ç—å –¥–ª—è –ø–µ—Ä–µ—Ä–≤–∏",
        "–ß–∞—Å –≥–ª–∏–±–æ–∫–æ–≥–æ –≤–¥–∏—Ö—É",
        "–ü–µ—Ä–µ—Ä–≤–∞: —ñ–Ω—ñ—Ü—ñ—é–π",
        "–î–æ—Å–∏—Ç—å, –∑—Ä–æ–±–∏ –ø–∞—É–∑—É",
        "–¢–∏ –Ω–µ —Ä–æ–±–æ—Ç, —Ç–∞–∫?",
        "–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –Ω–µ –≤—Ç–µ—á–µ",
        "–ü–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞ –¥–∑–µ–Ω",
        "–î–∞–π –ø–∞–ª—å—Ü—è–º –≤—ñ–¥–ø–æ—á–∏—Ç–∏",
        "–†–µ–ª–∞–∫—Å –¥–ª—è —á–µ–º–ø—ñ–æ–Ω–∞",
        "–ú–∞–π–Ω–¥—Ñ—É–ª–Ω–µ—Å-—Ä–µ–∂–∏–º",
        "–ù–µ –∑–≥–æ—Ä—è–π, –≤—ñ–¥–ø–æ—á–∏–Ω—å",
        "–í–æ–¥–∞? –•–æ–¥–∏ –∑–∞ –Ω–µ—é",
        "–†–æ–±–æ—Ç–∞ –∑–∞—á–µ–∫–∞—î",
        "–¢—É—Ä–±–æ—Ç–∞ –ø—Ä–æ —Ç–µ–±–µ",
        "–ß–∞—Å –¥–ª—è –ø–∞—É–∑–∏",
        "–¢–≤—ñ–π –¥–∑–µ–Ω-—Ç–∞–π–º–µ—Ä",
        "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∏—Å—å –∑–∞—Ä–∞–∑",
        "–û–Ω–æ–≤–∏ –µ–Ω–µ—Ä–≥—ñ—é",
        "–¢–∞–π–º-–∞—É—Ç –¥–ª—è –≥–µ–Ω—ñ—è",
        "–ó—Ä–æ–±–∏ –ø–∞—É–∑—É —à–≤–∏–¥—à–µ",
        "–¢–≤—ñ–π –º–æ–∑–æ–∫ —Å—Ç–æ–º–∏–≤—Å—è",
        "–ü–∞—É–∑–∞: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
        "–ó–∞–≤–∞—Ä—é —á–∞–π —ñ –≤—ñ–¥–ø–æ—á–∏–Ω—å",
        "–ì–æ–¥—ñ –∑–∞–ª–∏–ø–∞—Ç–∏ —Ç—É—Ç",
        "–î–∞–≤–∞–π, –ø–µ—Ä–µ—Ä–≤–∞ —á–∞—Å",
        "–†–µ–∂–∏–º: –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫",
        "–°–≤—ñ–∂–µ –ø–æ–≤—ñ—Ç—Ä—è –∫–ª–∏—á–µ",
        "–í—ñ–¥–ø—É—Å—Ç–∏ —ñ –≤—ñ–¥–ø–æ—á–∏–Ω—å",
        "–ü–µ—Ä–µ—Ä–≤–∞: –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ",
        "–ó—Ä–æ–±–∏ –ø–µ—Ä–µ—Ä–≤—É NOW", ]
    messages = [
        "–¢–∏ —Å–∏–ª—å–Ω–æ –∑–∞–ª–∏–ø–∞—î—à –ø–∞–º'—è—Ç–∞—î—à?\n–ó—Ä–æ–±–∏ –ø–µ—Ä–µ—Ä–≤—É!",
        "–ï–∫—Ä–∞–Ω –Ω–µ –≤—Ç–µ—á–µ, —Å–µ—Ä–π–æ–∑–Ω–æ.\n–ó—Ä–æ–±–∏ –ø–µ—Ä–µ—Ä–≤—É!",
        "–ü—Ä–æ—Å—Ç–æ –≤—ñ–¥—ñ—Ä–≤–∏—Å—è –Ω–∞ 5 —Ö–≤.\n–ú–∞–π–Ω–¥—Ñ—É–ª–Ω–µ—Å —á–µ–∫–∞—î!",
        "–ü–∞–ª—å—Ü—ñ –≤–∂–µ –≤—Ç–æ–º–∏–ª–∏—Å—å?\n–†–æ–∑—ñ–º–Ω–∏ —ó—Ö –Ω–∞ –ø–∞—É–∑—ñ!",
        "–í—Å—ñ –≥–µ–Ω—ñ–∞–ª—å–Ω—ñ —ñ–¥–µ—ó\n–ø—ñ—Å–ª—è –∫–æ—Ä–æ—Ç–∫–æ—ó –ø–µ—Ä–µ—Ä–≤–∏.",
        "–ì–æ–¥—ñ, –¥—Ä—É–∂–æ–∫, –µ–∫—Ä–∞–Ω\n–Ω–µ —Ç–≤–æ—î –¥–∑–µ—Ä–∫–∞–ª–æ!",
        "–ú–æ–Ω—ñ—Ç–æ—Ä —Ç–µ–∂ —Ö–æ—á–µ\n–≤—ñ–¥–ø–æ—á–∏—Ç–∏, —è–∫ —ñ —Ç–∏.",
        "–°–≤—ñ–∂–µ –ø–æ–≤—ñ—Ç—Ä—è - —Ç–≤—ñ–π\n–∫—Ä–∞—â–∏–π —Å–æ—é–∑–Ω–∏–∫ –∑–∞—Ä–∞–∑.",
        "–ü–∞—É–∑–∞ –¥–ª—è –∫–∞–≤–∏ –∞–±–æ —á–∞—é.\n–†–µ–∞–ª—å–Ω–æ, —Ü–µ –∫–æ—Ä–∏—Å–Ω–æ!",
        "–ù–µ –±—É–¥—å –≥–µ—Ä–æ—î–º –∑–∞–ª–∏–ø–∞–Ω–Ω—è.\n–†–µ–ª–∞–∫—Å ‚Äì —Ç–≤—ñ–π –≤–∏–±—ñ—Ä.",
        "5 —Ö–≤–∏–ª–∏–Ω –¥–ª—è —Å–µ–±–µ ‚Äì\n—Ü–µ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è –≤ –≥–µ–Ω—ñ—è.",
        "–ù–µ –∂–µ–Ω–∏ –∫–æ–Ω–µ–π, –∑–∞–ª—ñ–ø–∞–Ω–Ω—è\n—Ü–µ –Ω–µ —Ç–≤—ñ–π —à–ª—è—Ö.",
        "–ß–∞—Å –ø–æ–¥–±–∞—Ç–∏ –ø—Ä–æ —Å–ø–∏–Ω—É.\n–ü—Ä–æ—Å—Ç–æ —Ä–æ–∑—Ç—è–≥–Ω–∏—Å—å!",
        "–ú–æ–Ω—ñ—Ç–æ—Ä –º–æ–≤—á–∏—Ç—å, –∞–ª–µ\n—Ç–∏ –º–∞—î—à –∑—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ—Ä–≤—É.",
        "–ú–æ–∑–æ–∫ —Å–∫–∞–∂–µ —Ç–æ–±—ñ –¥—è–∫—É—é\n–ø—ñ—Å–ª—è –∫–æ—Ä–æ—Ç–∫–æ—ó –ø–∞—É–∑–∏.",
        "–ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ = –¥–æ–≤–≥–∞\n–µ–Ω–µ—Ä–≥—ñ—è –¥–ª—è –Ω–æ–≤–∏—Ö —Å–ø—Ä–∞–≤.",
        "–ü—Ä–æ—Å—Ç–æ –∑–≥–∞–¥–∞–π: –Ω–∞–≤—ñ—Ç—å\n—Ä–æ–±–æ—Ç–∏ —Ä–æ–±–ª—è—Ç—å –ø–µ—Ä–µ—Ä–≤–∏!",
        "–Ø–∫—â–æ —Ç–∏ —á–∏—Ç–∞—î—à —Ü–µ ‚Äì\n–∑—Ä–æ–±–∏ –ø–µ—Ä–µ—Ä–≤—É –Ω–µ–≥–∞–π–Ω–æ.",
        "–¢–≤—ñ–π —á–∞—Å –≤—Ç—ñ–∫—Ç–∏ –≤—ñ–¥ –µ–∫—Ä–∞–Ω—É\n–≤–∂–µ –Ω–∞—Å—Ç–∞–≤, –≤–ø–µ—Ä–µ–¥!",
        "–ï–Ω–µ—Ä–≥—ñ—è –Ω–µ –±–µ–∑–∫—ñ–Ω–µ—á–Ω–∞.\n–ó—Ä–æ–±–∏ –∑–∞—Ä—è–¥–∫—É –∑–∞—Ä–∞–∑.",
        "–í—ñ–∫–Ω–æ –Ω–µ –≤—Ç–µ—á–µ, —Ä–æ–±–æ—Ç–∞\n–ø–æ—á–µ–∫–∞—î, –∞ —Ç–∏ –≤—ñ–¥–ø–æ—á–∏–Ω—å.",
        "–ï–∫—Ä–∞–Ω —Ç–µ–∂ —Ö–æ—á–µ –≤—ñ–¥–ø–æ—á–∏—Ç–∏,\n—è–∫ —ñ —Ç–≤—ñ–π –º–æ–∑–æ–∫.",
        "–©–µ –ø—Ä–∞—Ü—é—î—à? –ú–æ–∂–µ —á–∞—Å\n–∑—Ä–æ–±–∏—Ç–∏ –∫–æ–≤—Ç–æ–∫ –∫–∞–≤–∏?",
        "–ü—Ä–æ—Å—Ç–æ –∑–Ω–∞–π —Å–≤–æ—î –º—ñ—Å—Ü–µ.\n–ù–∞ –ø–µ—Ä–µ—Ä–≤—ñ, –¥—Ä—É–∂–µ!",
        "–ì–µ–Ω—ñ—ó –±–µ—Ä—É—Ç—å –ø–∞—É–∑–∏.\n–•–æ—á–µ—à –±—É—Ç–∏ –≥–µ–Ω—ñ—î–º?",
        "–í–æ–¥—É —Ç–∏ —â–µ –Ω–µ –ø–∏–≤?\n–¢–æ–¥—ñ –ø–µ—Ä–µ—Ä–≤–∞ –∑–∞—Ä–∞–∑!",
        "–¢–≤–æ—è —Å–ø–∏–Ω–∞ —Å–∫–∞–∂–µ —Ç–æ–±—ñ\n–¥—è–∫—É—é –∑–∞ —Ä—É—Ö –∑–∞—Ä–∞–∑.",
        "–ú–∞–π–Ω–¥—Ñ—É–ª–Ω–µ—Å ‚Äì —Ü–µ –∫—Ä—É—Ç–æ.\n–†–µ–ª–∞–∫—Å –∑–∞—Ä–∞–∑!",
        "–ü—Ä–æ—Å—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫.\n–í—ñ–Ω –∑–º—ñ–Ω—é—î –≤—Å–µ.",
        "–ú–æ–∂–µ —á–∞—Å –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å\n–Ω–∞ —Å–≤—ñ—Ç –ø–æ–∑–∞ –µ–∫—Ä–∞–Ω–æ–º?",
        "–ì–æ–¥—ñ –≤–∂–µ! –ú–æ–Ω—ñ—Ç–æ—Ä –Ω–µ\n—Ç–≤–æ—è –¥—Ä—É–≥–∞ –ø–æ–ª–æ–≤–∏–Ω–∫–∞.",
        "–ú–æ–Ω—ñ—Ç–æ—Ä —Ç–æ–±—ñ –Ω–µ —Å–∫–∞–∂–µ:\n'–Ø —Ç–µ–∂ —Ç–µ–±–µ –ª—é–±–ª—é'.",
        "–¢–≤—ñ–π —Å—Ç—ñ–ª–µ—Ü—å —É–∂–µ\n–ø–ª–∞—á–µ –±–µ–∑ –ø–µ—Ä–µ—Ä–≤–∏.",
        "–°–∫—ñ–ª—å–∫–∏ –º–æ–∂–Ω–∞?!\n–ù–∞–≤—ñ—Ç—å Wi-Fi —Ö–æ—á–µ –≤—ñ–¥–ø–æ—á–∏—Ç–∏.",
        "–ü–æ–≥–ª—è–Ω—å –Ω–∞ —Ä—É–∫–∏ ‚Äì\n–≤–æ–Ω–∏ –∂ –ø—Ä–æ—Å—è—Ç—å –ø–∞—É–∑–∏!",
        "–¢–∏ –≤–∂–µ –ø–æ–±–∏–≤ —Ä–µ–∫–æ—Ä–¥\n–∑–∞–ª–∏–ø–∞–Ω–Ω—è? –í—ñ–¥–ø–æ—á–∏–Ω—å.",
        "–ú–æ–Ω—ñ—Ç–æ—Ä —ñ –±–µ–∑ —Ç–µ–±–µ\n–Ω–µ –≤–∏–º–∏–∫–∞—î—Ç—å—Å—è.",
        "–ù–∞–≤—ñ—Ç—å –∫–æ—Ç–∏ –∑–Ω–∞—é—Ç—å, —â–æ\n—Å–æ–Ω –≤–∞–∂–ª–∏–≤—ñ—à–∏–π –∑–∞ —Ü–µ.",
        "–¢–≤–æ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Ö–æ—á–µ\n—Ä–æ–∑–ª—É—á–µ–Ω–Ω—è –≤—ñ–¥ –ø–∞–ª—å—Ü—ñ–≤.",
        "–¢–≤–æ—ó –æ—á—ñ –∑–∞—Ä–∞–∑ –≤\n—Ä–µ–∂–∏–º—ñ '—Å–∏–Ω—ñ–π –µ–∫—Ä–∞–Ω'.",
        "–ú–æ–Ω—ñ—Ç–æ—Ä –Ω–µ –∑–∞–º—ñ–Ω–∏—Ç—å\n–æ–±—ñ–π–º—ñ–≤ –∑ —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—é.",
        "–ù–∞–≤—ñ—Ç—å —É Google —î —á–∞—Å\n–Ω–∞ –∫–∞–≤—É. –©–æ –∑ —Ç–æ–±–æ—é?",
        "–¢–≤—ñ–π –º–æ–∑–æ–∫ –≤–∂–µ —Ö–æ—á–µ\n–ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.",
        "–ù–µ –∑–∞–±—É–≤–∞–π: —Ç–∏ –Ω–µ\n—Ä–æ–±–æ—Ç, –∞ –º–æ–∂–µ –π —Ä–æ–±–æ—Ç?",
        "–ü–æ—Ä–∞ –Ω–∞–≥–∞–¥–∞—Ç–∏ —Å–æ–±—ñ,\n—â–æ —Ç–∏ ‚Äì –Ω–µ Wi-Fi —Ä–æ—É—Ç–µ—Ä.",
        "–Ø–∫—â–æ —Ç–∏ —Ü–µ —á–∏—Ç–∞—î—à,\n—á–∞—Å –ø—ñ—Ç–∏ –∑—Ä–æ–±–∏—Ç–∏ —á–∞–π.",
        "–ì–æ–¥—ñ –≤–∂–µ —Ñ–∞—Ä–º–∏—Ç–∏\n—Å–∏–Ω–¥—Ä–æ–º —Ç—É–Ω–µ–ª—é!",
        "–ú–æ–Ω—ñ—Ç–æ—Ä –Ω–µ –≤–∏—Ä–æ—Å—Ç–µ –≤\n–ø—ñ–∫—Å–µ–ª—è—Ö –≤—ñ–¥ –∑–∞–ª–∏–ø–∞–Ω–Ω—è.",
        "–Ø–∫ —â–æ–¥–æ 5 —Ö–≤–∏–ª–∏–Ω\n–∑—É—Å—Ç—Ä—ñ—á—ñ –∑ —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—é?",
        "–¢–≤—ñ–π —Å—Ç—ñ–ª –∑–∞ —Ç–µ–±–µ\n—Ö–≤–∏–ª—é—î—Ç—å—Å—è. –í—Å—Ç–∞–≤–∞–π!",
        "–ù–∞–≤—ñ—Ç—å —Å—Ç—ñ–ª–µ—Ü—å –º—Ä—ñ—î\n–ø—Ä–æ —Ç–≤–æ—î –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.",
        "–¢–≤–æ—è —à–∏—è –∑–∞—Ä–∞–∑ –ø–ª–∞—á–µ\n–∑ –ø—ñ–¥—Å–≤—ñ–¥–æ–º–æ—Å—Ç—ñ.",
        "–ú–æ–Ω—ñ—Ç–æ—Ä —Ç–µ–∂ —Ö–æ—á–µ —Ç—Ä–æ—Ö–∏\n—ñ–Ω—Ç–∏–º–Ω–æ—Å—Ç—ñ –±–µ–∑ —Ç–µ–±–µ.",
        "–ó–∞—Ä–∞–∑ —Å–∞–º–µ —á–∞—Å –¥–ª—è\n–ø–∞—É–∑–∏. –°–µ—Ä–π–æ–∑–Ω–æ.",
        "–ß–æ–º—É —Ç–∏ —Ç–∞–∫ –ª—é–±–∏—à —Ü–µ–π\n–º–æ–Ω—ñ—Ç–æ—Ä? –í–∏–π–¥–∏ –∑ –Ω–∏–º.",
        "–ü–µ—Ä–µ—Å—Ç–∞–Ω—å –≥–æ–¥—É–≤–∞—Ç–∏\n–º–æ–Ω—ñ—Ç–æ—Ä —Å–≤–æ—ó–º–∏ —Å–ª—ñ–∑—å–º–∏.",
        "–¢–≤—ñ–π –º–æ–Ω—ñ—Ç–æ—Ä –Ω–µ —Å—Ç–∞–Ω–µ\n–∫—Ä–∞—â–∏–º –≤—ñ–¥ –ø–æ–≥–ª—è–¥—É.",
        "–í –æ—á–∞—Ö –≤–∂–µ '—Å–Ω—ñ–≥'? –ê\n–Ω–∞ –≤—É–ª–∏—Ü—ñ —î —Å–ø—Ä–∞–≤–∂–Ω—ñ–π.",
        "–ú–æ–Ω—ñ—Ç–æ—Ä –≤–∂–µ –±–∞—á–∏—Ç—å\n—É—Å–µ –¥–≤—ñ—á—ñ. –í—ñ–¥–ø–æ—á–∏–Ω—å!",
        "–Ø–∫—â–æ —Ç–≤—ñ–π —Å—Ç—ñ–ª –º—ñ–≥\n–±–∏ –≥–æ–≤–æ—Ä–∏—Ç–∏, –≤—ñ–Ω –±–∏ –∫—Ä–∏—á–∞–≤.",
        "–ü–æ–≥–ª—è–Ω—å –Ω–∞ —Å–µ–±–µ, —Ç–∏ –∂\n—É–∂–µ –ø—ñ–∫—Å–µ–ª—ñ–∑–æ–≤–∞–Ω–∏–π!",
        "–í—ñ–¥–ø–æ—á–∏–Ω—å. –ù–∞–≤—ñ—Ç—å\n–¢–µ—Ç—Ä—ñ—Å –º–∞—î –ø–∞—É–∑—É.",
        "–¢–≤—ñ–π —Å–ø–∏–Ω–Ω–∏–π –º–æ–∑–æ–∫\n–æ–±—Ä–∞–∑–∏–≤—Å—è –Ω–∞ —Ç–µ–±–µ.",
        "–ú–æ–Ω—ñ—Ç–æ—Ä—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞\n—Ç–≤–æ—è –±–µ–∑—Å–æ–Ω–Ω—è.",
        "–ß–∞—Å —Å–∫–∞–∑–∞—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä—É:\n'–Ø –∑–∞—Ä–∞–∑ –ø–æ–≤–µ—Ä–Ω—É—Å—å'.",
        "–¢–∏ –Ω–µ —à–ø–∏–≥—É–Ω –∑–∞\n–º–æ–Ω—ñ—Ç–æ—Ä–∞–º–∏. –í—ñ–¥–ø–æ—á–∏–Ω—å.",
        "–ù–∞–≤—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä–∏ –º–∞—é—Ç—å\n—á–∞—Å –¥–ª—è —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è.",
        "–ü–µ—Ä–µ—Å—Ç–∞–Ω—å —Ñ–∞—Ä–º–∏—Ç–∏\n–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ –≤–∏–≥–æ—Ä–∞–Ω–Ω—è.",
        "–¢–≤—ñ–π —Å—Ç—ñ–ª–µ—Ü—å –≤—Ç–æ–º–∏–≤—Å—è\n–±—É—Ç–∏ —Ç–≤–æ—ó–º –∂–∏—Ç—Ç—è–º.",
        "–ú–æ–Ω—ñ—Ç–æ—Ä —Ç–µ–±–µ –ª—é–±–∏—Ç—å,\n–∞–ª–µ –Ω–µ –Ω–∞—Å—Ç—ñ–ª—å–∫–∏.",
        "–¢–∏ –≤–∏–≥—Ä–∞–≤ –º–∞—Ä–∞—Ñ–æ–Ω\n–Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ. –í—ñ–¥–ø–æ—á–∏–Ω—å.",
        "–ù–µ –ø—Å—É–π —Å–æ–±—ñ –ø–æ—Å—Ç–∞–≤—É,\n–ø–æ—Ç—Ä–∏–º–∞–π —Å–≤—ñ—Ç–ª–æ.",
        "–¢–≤—ñ–π –º–æ–∑–æ–∫ –ø—Ä–æ—Å–∏—Ç—å\n–≤—ñ—Ç–∞–º—ñ–Ω—É D. –í–∏–π–¥–∏ –Ω–∞–¥–≤—ñ—Ä.",
        "–©–µ —Ç—Ä–æ—à–∫–∏ —ñ —Ç–∏ —Å—Ç–∞–Ω–µ—à\n–¥—Ä—É–≥–∏–º –†–æ–±–æ–∫–æ–ø–æ–º.",
        "–ú–æ–Ω—ñ—Ç–æ—Ä –±–∞—á–∏—Ç—å –±—ñ–ª—å—à–µ,\n–Ω—ñ–∂ —Ç–≤–æ—ó –æ—á—ñ. –ü–µ—Ä–µ—Ä–≤–∞.",
        "–¢–≤—ñ–π —Å—Ç—ñ–ª–µ—Ü—å –ø—Ä–æ—Ç–µ—Å—Ç—É—î\n–º–æ–≤—á–∫–∏. –í—Å—Ç–∞–Ω—å.",
        "–ü–µ—Ä–µ—Å—Ç–∞–Ω—å —Ñ–∞—Ä–º–∏—Ç–∏\n—Å–∏–º–ø—Ç–æ–º–∏ —Ç—É–Ω–µ–ª—é. –ß–∞—Å —Ä—É—Ö—É.",
        "–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –Ω–µ –±—É–¥–µ\n–ø–∏—Å–∞—Ç–∏ –∑–∞ —Ç–µ–±–µ –≤—ñ–¥–º–æ–≤—É.",
        "–í—ñ–¥–ø–æ—á–∏–Ω—å! –ö–æ–≤—Ä–∏–∫ –¥–ª—è\n–º–∏—à—ñ —Ö–æ—á–µ –ø—Ä–æ—Å—Ç–æ—Ä—É.",
        "–ú–æ–Ω—ñ—Ç–æ—Ä –∫–∞–∂–µ, —â–æ —Ç–∏\n–∑–∞–±—É–≤, —è–∫ –≤–∏–≥–ª—è–¥–∞—î—à.",
        "–ü–æ—Ä–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Å–µ–±–µ –¥–æ\n–≤–µ—Ä—Å—ñ—ó '–∂–∏–≤–∏–π'.",
        "–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ ‚Äì —Ü–µ\n–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –∞–ø–≥—Ä–µ–π–¥ –º–æ–∑–∫—É.",
        "–ü'—è—Ç—å —Ö–≤–∏–ª–∏–Ω –Ω–∞ —á–∞–π ‚Äì\n—Ü–µ —Ü—ñ–ª–∏–π —Ä–∏—Ç—É–∞–ª.",
        "–¢–≤—ñ–π —Å—Ç—ñ–ª –º—Ä—ñ—î, —â–æ–± —Ç–∏\n–Ω–∞—Ä–µ—à—Ç—ñ –≤—Å—Ç–∞–≤.",
        "–¢–≤—ñ–π –µ–∫—Ä–∞–Ω –Ω–µ —á–µ–∫–∞—î\n—Ç–≤–æ—î—ó –≤—ñ–¥–¥–∞–Ω–æ—Å—Ç—ñ.",
        "–ú–æ–Ω—ñ—Ç–æ—Ä –≤–∂–µ –¥—É–º–∞—î, —â–æ\n—Ç–∏ ‚Äì –π–æ–≥–æ —á–∞—Å—Ç–∏–Ω–∞.",
        "–¢–≤–æ—è –º–∏—à–∞ —Ö–æ—á–µ\n—Ä–µ–≤–∞–Ω—à—É –≤ —Ä—É—Å—ñ.",
        "–ù–µ –¥–∞–π –º–æ–Ω—ñ—Ç–æ—Ä—É –∑–∂–µ—Ä—Ç–∏\n—É—Å–µ —Ç–≤–æ—î –∂–∏—Ç—Ç—è.",
        "–ü–æ–≥–ª—è–Ω—å —É –¥–∑–µ—Ä–∫–∞–ª–æ:\n—Ç–∏ –≤–∂–µ –ø—ñ–∫—Å–µ–ª—å–Ω–∏–π!",
        "–ú–æ–Ω—ñ—Ç–æ—Ä –Ω–µ –∑–º–æ–∂–µ\n—Å–∫–∞–∑–∞—Ç–∏ '–¥—è–∫—É—é' –∑–∞ —Ü–µ.",
        "–ù–∞–≤—ñ—Ç—å NPC –ø–æ—Ç—Ä–µ–±—É—é—Ç—å\n–ø–∞—É–∑ –º—ñ–∂ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏.",
        "–¢–≤—ñ–π Wi-Fi —Ö–æ—á–µ, —â–æ–±\n—Ç–∏ –≤–∏–π—à–æ–≤ –Ω–∞ –≤—É–ª–∏—Ü—é.",
        "–¢–∏ –∑–∞—Å–ª—É–≥–æ–≤—É—î—à –Ω–∞\n–∫–∞–≤—É. –ó—Ä–æ–±–∏ —Ü–µ –∑–∞—Ä–∞–∑.",
        "–¢–≤–æ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Ö–æ—á–µ\n–Ω–∞–ø–∏—Å–∞—Ç–∏ —Ç–æ–±—ñ –ª–∏—Å—Ç.",
        "–ï–∫—Ä–∞–Ω –Ω–µ –≤–∏—Ä—ñ—à–∏—Ç—å\n—Ç–≤–æ—ó—Ö –ø—Ä–æ–±–ª–µ–º. –í—ñ–¥–ø–æ—á–∏–Ω—å.",
        "–ß–æ–º—É –º–æ–Ω—ñ—Ç–æ—Ä –∫—Ä–∞—â–µ –∑–∞\n—Å–æ–Ω? –í—ñ–Ω –Ω–µ –∫—Ä–∞—â–µ.",
        "–¢–∏ –¥—É–º–∞—î—à, —â–æ –≥—Ä–∞—î—à –≤\n'–ñ–∏—Ç—Ç—è', –∞–ª–µ –≥—Ä–∞—î—à –≤ 'AFK'.",
        "–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ ‚Äì —Ü–µ —è–∫\n–ª–∞–≥ –¥–ª—è —Ç–≤–æ—ó—Ö –¥—É–º–æ–∫.",
        "–¢–≤—ñ–π –µ–∫—Ä–∞–Ω —Ö–æ—á–µ, —â–æ–±\n—Ç–∏ –π–æ–≥–æ –∑–∞–±—É–≤ –Ω–∞ –≥–æ–¥–∏–Ω—É.",
        "–ú–æ–Ω—ñ—Ç–æ—Ä —Ç–µ–±–µ –Ω–µ\n–∑–∞—Å–ø–æ–∫–æ—ó—Ç—å. –õ–∏—à–µ —á–∞–π.",
        "–¢–≤–æ—è —à–∏—è –∑—ñ–±—Ä–∞–ª–∞ –≤–∂–µ\n—É—Å—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –±–æ–ª—é.",
        "–í–∏–π–¥–∏ –Ω–∞–¥–≤—ñ—Ä. –ú–æ–Ω—ñ—Ç–æ—Ä\n–≤—Å–µ –æ–¥–Ω–æ —Ç–µ–±–µ –Ω–µ –ª—é–±–∏—Ç—å.",
        "–¢–≤—ñ–π CPU –∑–∞—Ä–∞–∑ –Ω–∞\n–Ω–∏–∑—å–∫–æ–º—É –µ–Ω–µ—Ä–≥–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.",
        "–Ø–∫ —â–æ–¥–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è\n—Å–≤–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é?",
        "–ú–æ–Ω—ñ—Ç–æ—Ä—É –Ω–∞—á—Ö–∞—Ç–∏ –Ω–∞\n—Ç–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.",
        "–¢–≤—ñ–π –º–æ–∑–æ–∫ —Ö–æ—á–µ –∫–µ—à-\n–æ—á–∏—â–µ–Ω–Ω—è. –î—ñ–π –∑–∞—Ä–∞–∑!",
        "–ù–∞–≤—ñ—Ç—å NPC –º–∞—é—Ç—å —Å–≤–æ—ó\n–ø–µ—Ä–µ—Ä–≤–∏. –©–æ –∑ —Ç–æ–±–æ—é?",
        "–¢–≤—ñ–π —Å—Ç—ñ–ª —É–∂–µ –Ω–µ –≤—ñ—Ä–∏—Ç—å,\n—â–æ —Ç–∏ –∂–∏–≤–∏–π.",
        "–¢–≤–æ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Ö–æ—á–µ\n–ø–æ—Å–ø–∞—Ç–∏, —è–∫ —ñ —Ç–∏.",
        "–ú–æ–Ω—ñ—Ç–æ—Ä –≤—Å–µ –æ–¥–Ω–æ –Ω–µ\n—Ä–æ–∑–∫–∞–∂–µ —Ç–æ–±—ñ –∂–∞—Ä—Ç—ñ–≤.",
        "–ö—Ä–∞—â–µ 5 —Ö–≤–∏–ª–∏–Ω –∑–∞—Ä–∞–∑,\n–Ω—ñ–∂ 5 –≥–æ–¥–∏–Ω –ø–æ—Ç—ñ–º.",
        "–ú–æ–Ω—ñ—Ç–æ—Ä –Ω–µ –±—É–¥–µ\n—Å—É–º—É–≤–∞—Ç–∏ –∑–∞ —Ç–æ–±–æ—é.",
        "–¢–≤—ñ–π —Å—Ç—ñ–ª–µ—Ü—å –≤–∂–µ –º—Ä—ñ—î\n–ø—Ä–æ —ñ–Ω—à—É —á–∞—Å—Ç–∏–Ω—É —Ç—ñ–ª–∞.",
        "–¢–≤–æ—è —à–∏—è ‚Äì —Ü–µ –Ω–µ\nWi-Fi –∞–Ω—Ç–µ–Ω–Ω–∞. –í—ñ–¥–ø–æ—á–∏–Ω—å.",
        "–¢–∏ –≤–∂–µ –≤—ñ–¥–ø—É—Å—Ç–∏–≤ —Å–≤—ñ–π\n–º–æ–Ω—ñ—Ç–æ—Ä? –ó—Ä–æ–±–∏ —Ü–µ –∑–∞—Ä–∞–∑.",
        "–ü–µ—Ä–µ—Ä–≤–∞ ‚Äì —Ü–µ —è–∫ Ctrl+Z\n–¥–ª—è –≤—Ç–æ–º–∏.",
        "–ú–æ–Ω—ñ—Ç–æ—Ä –Ω–µ –≤—ñ–¥—á–∏–Ω–∏—Ç—å\n—Ç–æ–±—ñ –ø–æ—Ä—Ç–∞–ª –¥–æ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ.",
        "–¢–≤–æ—è –º–∏—à–∞ —Ö–æ—á–µ –ø—Ä–æ–±—ñ–∂–∫—É.\n–ß–æ–º—É –Ω—ñ?",
        "–ú–æ–Ω—ñ—Ç–æ—Ä –Ω–µ –∑–∞–º—ñ–Ω–∏—Ç—å\n—Å–æ–Ω—Ü—è. –Ü–¥–∏ –Ω–∞–∑—É—Å—Ç—Ä—ñ—á –π–æ–º—É."]

    random.shuffle(titles)
    title = random.choice(titles) if title == "" else title
    random.shuffle(messages)
    text = random.choice(messages) if text == "" else text
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    Thread(target=create_window(title, text)).start()


def countdown():
    while timer_data["remaining"] > 0 and timer_data["running"]:
        time.sleep(1)
        timer_data["remaining"] -= 1
        # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∑–∞ 5 —Ö–≤–∏–ª–∏–Ω
        if timer_data["remaining"] == 300:
            if timer_data["mode"] == "sleep":
                def notify():
                    show_notification(title="üí§–∑–∞–ª–∏—à–∏–ª–æ—Å—å 5 —Ö–≤üí§",
                                      text="–ö–æ–º–ø'—é—Ç–µ—Ä –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å\n–≤ —Å–æ–Ω —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω",
                                      duration=10,
                                      image_path=r"icons/bye_sleep.png")
                Thread(target=notify, daemon=True).start()
            else:
                def notify():
                    show_notification(title="üëã–∑–∞–ª–∏—à–∏–ª–æ—Å—å 5 —Ö–≤üëã",
                                      text="–ö–æ–º–ø'—é—Ç–µ—Ä –≤–∏–º–∫–Ω–µ—Ç—å—Å—è\n—á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω",
                                      duration=10,
                                      image_path=r"icons/bye.png")
                Thread(target=notify, daemon=True).start()
        # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∑–∞ 10s
        if timer_data["remaining"] == 10:
            if timer_data["mode"] == "sleep":
                def notify():
                    show_notification(title="üí§–Ø —Å–ø–∞—Ç–∏üí§",
                                      text="–ö–æ–º–ø'—é—Ç–µ—Ä –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å\n–≤ —Å–æ–Ω —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥",
                                      duration=10,
                                      image_path=r"icons/bye_sleep.png")
                Thread(target=notify, daemon=True).start()
            else:
                def notify():
                    show_notification(title="üëã–ë–ëüëã",
                                      text="–ö–æ–º–ø'—é—Ç–µ—Ä –≤–∏–º–∏–∫–∞—î—Ç—å—Å—è\n—á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥",
                                      duration=10,
                                      image_path=r"icons/bye.png")
                Thread(target=notify, daemon=True).start()

    if timer_data["remaining"] == 0 and timer_data["running"]:
        if timer_data["mode"] == "sleep":
            os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")
        else:
            os.system("shutdown /s /t 5")
        timer_data["running"] = False


@app.route('/start_timer', methods=['POST'])
def start_timer():
    data = request.json
    seconds = data['hours'] * 3600 + data['minutes'] * 60 + data['seconds']
    mode = data['mode']

    timer_data["remaining"] = seconds
    timer_data["running"] = True
    timer_data["mode"] = mode

    thread = Thread(target=countdown)
    thread.start()

    return jsonify({"status": "started"})


@app.route('/stop_timer', methods=['POST'])
def stop_timer():
    timer_data["running"] = False
    return jsonify({"status": "stopped"})


@app.route('/get_time')
def get_time():
    return jsonify({
        "remaining": timer_data["remaining"],
        "running": timer_data["running"],
        "mode": timer_data["mode"]
    })


@app.route('/set_mode', methods=['POST'])
def set_mode():
    data = request.get_json()
    mode = data.get('mode')
    if mode in ['shutdown', 'sleep']:
        timer_data['mode'] = mode
        return jsonify({'status': 'mode updated'})
    return jsonify({'status': 'invalid mode'}), 400


@app.route('/', methods=['GET', 'POST'])
def login():
    if 'authenticated' in session:
        return render_template('index.html')

    if request.method == 'POST':
        if request.form['password'] == PASSWORD:
            session.permanent = True
            session['authenticated'] = True
            return redirect(url_for('login'))
        else:
            # login_page_head + login_page_body_error
            return render_template('login_page.html')

    # login_page_head + login_page_body
    return render_template('login_page.html')


@app.route('/logout')
def logout():
    session.pop('authenticated', None)
    return redirect(url_for('login'))


@app.route("/get_usage_data", methods=['POST'])
def get_usage_data():
    js_data = request.get_json()
    chart_type = js_data.get("chart_type")
    period = js_data.get("period")
    prevdays = None

    data = pd.read_csv("time_tracker_stat.csv")
    if period == 'week':
        prevdays = 7
    elif period == 'month':
        prevdays = 31
    elif period == 'all_time':
        prevdays = None
    elif re.compile("^\d{4}-\d{2}-\d{2}$").match(period):
        data = data[data['Date'] == period]
    else:
        date = data['Date'].iloc[-1]
        data = data[data['Date'] == date]
    if prevdays is not None:
        last_date = pd.to_datetime(
            data['Date'].iloc[-1]) - pd.Timedelta(days=prevdays)
        date_range = list(pd.date_range(last_date, freq="D", periods=prevdays))
        date_range = [tmsp.strftime("%Y-%m-%d") for tmsp in date_range]
        data = data[data['Date'].isin(date_range)]

    if chart_type == 'total_usage':
        return get_total_usage_data(data)
    elif chart_type == 'apps_usage':
        return get_apps_usage_data(data, period, min_dur=30)
    elif chart_type == 'time_table':
        return get_time_table_data(data, period)
    else:
        return None


@app.route('/media_info')
def media_info():
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π event loop –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
        new_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(new_loop)
        media = new_loop.run_until_complete(get_media_info())
        new_loop.close()
    except Exception as e:
        print('ERROR!!!!!!!! media_info() app.py: ', e)
        media = []
    sound_peak = get_active_audio_sessions(threshold=0.005)
    source_peak = []
    for name, peak in sound_peak:
        source_peak.append([name, peak])
    return jsonify({
        "title": media["title"] if media else "–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞",
        "artist": media["artist"] if media else "–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å",
        "playback_status": media["is_playing"] if media else "Playback status not defined",
        "source": source_peak[0][0] if source_peak else "No source",
        "peak": source_peak[0][1] if source_peak else 0.005
    })


@app.route("/control_media", methods=['POST'])
def bridge_to_control_media():
    js_data = request.get_json()
    action = js_data.get("action")
    new_loop = asyncio.new_event_loop()
    asyncio.set_event_loop(new_loop)
    msg = new_loop.run_until_complete(control_media(action))
    new_loop.close()
    done_action = {'play': 'media played', 'pause': 'media paused', 'next': 'media switched', 'previous': 'media switched'}
    if msg == 'success':
        print({"status": f"{done_action[action]}"})
        return jsonify({"status": f"{done_action[action]}"})
    else:
        print({'status': msg})
        return jsonify({'status': msg})


@app.route("/blya", methods=["POST"])
def blya():
    fix_keyboard_layout()
    return jsonify({'status': 'ok'})


@app.before_request
def check_session_timeout():
    session.permanent = True  # –æ–Ω–æ–≤–ª—é—î —á–∞—Å –∂–∏—Ç—Ç—è –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∑–∞–ø–∏—Ç—ñ
    if request.path.startswith("/static/public/"):
        return
    if 'authenticated' in session:
        pass  # –≤—Å–µ –æ–∫
    else:
        # —è–∫—â–æ —Å–µ—Å—ñ—è –ø—Ä–æ—Ç—É—Ö–ª–∞ ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ
        if request.endpoint != 'login':
            return redirect(url_for('login'))


def track_active_window(break_time=2400, save_period=300):
    last_window = None
    start_time = time.time()
    start_time_for_breaks = time.time()
    big_break = time.time()
    last_save_time = time.time()
    log = []
    global running
    running = True

    def update_log(start_time, end_time, last_window, log):
        date_and_time = str(
            datetime.datetime.fromtimestamp(start_time)).split(" ")
        duration = round((end_time - start_time), 2)
        log.append((date_and_time[0],
                    date_and_time[1].split(".")[0],
                    duration,
                    last_window))
        return log

    while running:
        # re.sub –≤–∏–¥–∞–ª—è—î —á–∏—Å–ª–∞ –≤ –¥—É–∂–∫–∞—Ö –∑ –¥–µ—Ñ—ñ—Å–∞–º–∏ —Ç–∞ –Ω–µ–≤–∏–¥–∏–º—ñ —Å–∏–º–≤–æ–ª–∏
        window = (re.sub(r"\s*‚Äì*\s*\(\d+\)\s*‚Äì*\s*|[\u200B-\u200D\u200E\u200F\u202A-\u202E\uFEFF\"|‚óè]",
                         "",
                         GetWindowText(GetForegroundWindow()))).strip()
        # –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –≤—ñ–∫–Ω–∞ == "undefined"
        window = "undefined" if window == "" or window == None else window
        if window != last_window:
            end_time = time.time()
            if last_window:
                log = update_log(start_time, end_time, last_window, log)
            last_window = window
            start_time = time.time()
            start_time_for_breaks = time.time()
        elif (time.time() - start_time_for_breaks > break_time) or (time.time() - big_break > break_time + 1800):
            # Thread(target=play_sound).start()  –Ü–¥–µ—é –∑—ñ –∑–≤—É–∫–æ–≤–∏–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º –ø–æ–∫–∏ –≤—ñ–¥–∫–∏–¥–∞—é. winsound, playsound, pydub –Ω–µ –¥–∞—é—Ç—å –±–∞–∂–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            show_notification(duration=7,
                              image_path=r"icons/break-time by juicy_fish.png")
            start_time_for_breaks = time.time()
            big_break = time.time()
        if time.time() - last_save_time > save_period:
            print("Autosave...")
            end_time = time.time()
            log = update_log(start_time, end_time, last_window, log)
            # —á–∏—â—É –ª–æ–≥–∏, —â–æ–± –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤–æ–Ω–∏ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            log = save_log(log, "time_tracker_stat.csv")  # –ø–æ–≤–µ—Ä—Ç–∞—î []
            # –∑–±–∏–≤–∞—é —á–∞—Å, —â–æ–± –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —á–∞—Å –¥–æ–¥–∞–≤–∞–≤—Å—è –¥–æ –Ω–æ–≤–æ—ó —Ç–æ—á–∫–∏
            start_time = time.time()
            last_save_time = time.time()
        time.sleep(1)  # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É


def save_log(usage_log, save_location):
    new_data = pd.DataFrame(
        usage_log, columns=["Date", "StartTime", "Duration(sec)", "Program"])
    data = pd.read_csv(save_location)

    new_data = new_data.groupby(['Date', 'Program']).agg(
        {'StartTime': 'min', 'Duration(sec)': 'sum'}).reset_index()
    new_data.sort_values(['StartTime'], ascending=[True], inplace=True)
    # —Å–∫–æ—Ä–æ—á—É—é –Ω–∞–∑–≤–∏ –ø—Ä–æ–≥—Ä–∞–º
    new_data['Program'] = new_data['Program'].apply(lambda x: x.replace(
        "Google Chrome", "GChrome") if 'Google Chrome' in x else x)
    new_data['ShortName'] = new_data['Program'].apply(lambda x: (
        x[:20] + " ... " + x[-25:]) if len(x) > 50 else x)
    # –ø–∏—à—É –¥–Ω—ñ —Ç–∏–∂–Ω—è
    weekdays_ua = {0: "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", 1: "–í—ñ–≤—Ç–æ—Ä–æ–∫", 2: "–°–µ—Ä–µ–¥–∞",
                   3: "–ß–µ—Ç–≤–µ—Ä", 4: "–ü\'—è—Ç–Ω–∏—Ü—è", 5: "–°—É–±–æ—Ç–∞", 6: "–ù–µ–¥—ñ–ª—è"}
    new_data['WeekDay'] = pd.to_datetime(new_data['Date']).apply(
        lambda d: weekdays_ua[(d).weekday()])

    # –≤–∏—á–ª–µ–Ω–∏—Ç—å big app name
    def cut_to_big(program):
        big_apps = ["- YouTube -", "- Twitch -", "- Cursor", "- GChrome"]
        for big_name in big_apps:
            if big_name in program:
                return big_name.split(" ")[1]
        return 'Others'

    new_data['BigApp'] = new_data['Program'].apply(lambda x: cut_to_big(x))

    # –ø—Ä–∏–∑–Ω–∞—á–∏—Ç—å –∫–æ–ª—ñ—Ä
    def set_color(name):
        colors_map = {"YouTube": "#FF0033",  # —á–µ—Ä–≤–æ–Ω–∏–π
                      "Twitch": "#9147FF",  # —Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π
                      "Cursor": "#ADBAB6",  # —Å—ñ—Ä–∏–π
                      "GChrome": "#8DBF6C",  # –∑–µ–ª–µ–Ω–∏–π
                      }
        try:
            return colors_map[name]
        except KeyError:
            return "#757575"  # –ø–æ–ø—ñ–ª—å–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤–∏–π

    new_data['Color'] = new_data['BigApp'].apply(lambda x: set_color(x))

    data = pd.concat([data, new_data], ignore_index=True)
    data.to_csv(save_location, index=False)
    saved_at = str(datetime.datetime.fromtimestamp(time.time())).split(" ")[1].split(".")[0]
    print(f"{saved_at} Logs Saved.")
    return []


def get_time_table_data(data, period):
    if period != 'today' and re.compile("^\d{4}-\d{2}-\d{2}$").match(period) is None:
            data = data.groupby(['Date', 'Program', 'ShortName', 'Color', 'WeekDay']).agg(
                {'StartTime': 'min', 'Duration(sec)': 'sum'}).reset_index()
    else:
        data['StartTime'] = pd.to_datetime(
            data['Date'] + ' ' + data['StartTime'])
        data['Duration(sec)'] = pd.to_timedelta(data['Duration(sec)'], unit='s')
        data['EndTime'] = data['StartTime'] + data['Duration(sec)']
        data = data.sort_values(
            ['Program', 'StartTime']).reset_index(drop=True)
        group_ids = []
        group_id = 0
        for i in range(len(data)):
            if i == 0:
                group_ids.append(group_id)
                continue
            same_name = data.loc[i, 'Program'] == data.loc[i - 1, 'Program']
            time_diff = (data.loc[i, 'StartTime'] -
                         data.loc[i - 1, 'EndTime']).total_seconds()
            # –ù–æ–≤–∞ –≥—Ä—É–ø–∞, —è–∫—â–æ —ñ–Ω—à–µ —ñ–º‚Äô—è –∞–±–æ –ø–∞—É–∑–∞ ‚â• 1 —Å–µ–∫
            if not same_name or time_diff >= 30:
                group_id += 1
            group_ids.append(group_id)
        data['group_id'] = group_ids

        data = data.groupby(['Program', 'group_id', 'ShortName', 'Color', 'WeekDay']).agg({
            'StartTime': 'first',
            'EndTime': 'last',
            'Duration(sec)': 'sum',
            'group_id': 'count'
        }).rename(columns={'group_id': 'entries'}).reset_index()
        # –ø–æ–≤–µ—Ä—Ç–∞—é –¥–æ –∫–æ–ª–∏—à–Ω—å–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
        data['Date'] = data['StartTime'].apply(lambda x: x.strftime('%Y-%m-%d'))
        data['StartTime'] = data['StartTime'].dt.strftime('%H:%M:%S')
        data['Duration(sec)'] = data['Duration(sec)'].dt.total_seconds()

    data['TotalDuration(sec)'] = data.groupby('Program')[
        'Duration(sec)'].transform('sum')
    data.sort_values(['TotalDuration(sec)'], ascending=True, inplace=True)
    data = data[data['Program'].isin(data['Program'].unique()[-25:])]
    return data.to_json(orient='records')


def get_apps_usage_data(data, period, min_dur=30):
    if period != 'today' and re.compile("^\d{4}-\d{2}-\d{2}$").match(period) is None:
        data['Date'] = str(data['Date'].min()) + " ‚Äì " + \
            str(data['Date'].max())
        data['WeekDay'] = 'Never mind'
    data = data.groupby(['Program', 'ShortName', 'Date', 'WeekDay', 'Color'])[
        'Duration(sec)'].sum().reset_index()
    data.sort_values(['Duration(sec)', 'Program'],
                     ascending=True, inplace=True)
    data = data.iloc[-25:, :]
    return data.to_json(orient='records')


def get_total_usage_data(data):
    data = data.groupby(['BigApp', 'Color'])[
        'Duration(sec)'].sum().reset_index()
    return data.to_json(orient='records')


if __name__ == '__main__':
    Thread(target=track_active_window, daemon=True).start()
    app.run(host='0.0.0.0', port=5000, debug=False)
